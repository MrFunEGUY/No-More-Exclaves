namespace = nme

country_event = {
    id = nme.1000
	is_triggered_only = yes	
	hide_window = yes

	trigger = {
		is_at_war = no
		is_country_type_with_subjects = yes
	}
	
	immediate = {
		# So this doesnt run for all countries at the same time, for performance
		country_event = { id = nme.1010 days = 2 random = 358 }
	}
}

country_event = {
    id = nme.1010
	is_triggered_only = yes	
	hide_window = yes

	trigger = {
		is_at_war = no
		is_country_type_with_subjects = yes
		any_system_within_border = {
			is_capital_system = no
			NOT = { exists = sector }
			NOT = { has_star_flag = nme_recently_built }
			NOT = { any_system_planet = { is_owned_by = root } }
			# EHOF Compat
			cohesive_system = no
			giga_has_an_active_ehof = no
		}
	}
	
	immediate = {

		## In this event, we just check the capital. If it doesn't connect here, then we check deeper in the next event.
		capital_scope.solar_system = {
			create_fleet = {
				effect = {
					set_owner = root
					create_ship = {
						name = "Lonely System Check Ship"
						design = "NAME_AI_Constructor"
						graphical_culture = owner
					}
					set_location = {
						target = root.capital_scope
						distance = 10
						angle = random
					}
					save_event_target_as = access_checker_fleet
				}
			}
		}

		every_system_within_border = {
			limit = {
				is_capital_system = no
				NOT = { exists = sector }
				NOT = { has_star_flag = nme_recently_built }
				NOT = { any_system_planet = { is_owned_by = root } }
				# EHOF Compat
				cohesive_system = no
				giga_has_an_active_ehof = no
				event_target:access_checker_fleet = { NOT = { can_access_system = prev } }
			}
			system_event = { id = nme.2000 days = 1 random = 720 }
		}
	}

	after = {		
		event_target:access_checker_fleet = { destroy_fleet = this }
	}	
}

system_event = {
    id = nme.2000
	is_triggered_only = yes
	hide_window = yes

	trigger = { 
		exists = owner
		owner = { is_at_war = no }
		is_capital_system = no
		NOT = { exists = sector }
		NOT = { has_star_flag = nme_recently_built }
		NOT = { any_system_planet = { is_owned_by = root } }
		# EHOF Compat
		cohesive_system = no
		giga_has_an_active_ehof = no
	}
	
	immediate = {

		owner = {

			save_event_target_as = exclave_owner

			export_trigger_value_to_variable = {
				trigger = num_sectors
				variable = number_of_sectors
			}

			# Here, we check if the planet can safely accessed by a ship from any sector capital. If the answer is no, we take the system away.
			while = {
				count = number_of_sectors
				random_owned_sector = {
					limit = { NOT = { has_sector_flag = access_checked_sector } }
					set_sector_flag = access_checked_sector

					sector_capital = {
						create_fleet = {
							effect = {
								set_owner = event_target:exclave_owner
								create_ship = {
									name = "Lonely System Check Ship"
									design = "NAME_AI_Constructor"
									graphical_culture = owner
								}
								set_location = {
									target = prev
									distance = 10
									angle = random
								}
								set_fleet_flag = access_checker_ship
								save_event_target_as = access_checker_fleet
							}
						}
					}

					root = {
						if = {
							limit = { event_target:access_checker_fleet = { can_access_system = root } }
							set_star_flag = can_be_accessed
						}
					}
				}
			}
		}

		# owner.capital_scope.solar_system = {
		# 	create_fleet = {
		# 		effect = {
		# 			set_owner = event_target:exclave_owner
		# 			create_ship = {
		# 				name = "Lonely System Check Ship"
		# 				design = "NAME_AI_Constructor"
		# 				graphical_culture = owner
		# 			}
		# 			set_location = {
		# 				target = event_target:exclave_owner.capital_scope
		# 				distance = 10
		# 				angle = random
		# 			}
		# 			save_event_target_as = access_checker_fleet
		# 		}
		# 	}
		# }

		# if = {
		# 	limit = { event_target:access_checker_fleet = { NOT = { can_access_system = root } } }
		# 	starbase.fleet = { destroy_fleet = this }
		# 	create_message = {
		# 		type = NME_exclave_lost_message
		# 		localization = NME_exclave_lost_message_desc
		# 		days = 30
		# 		target = this # the exclaved system
		# 		variable = {
		# 			type = name
		# 			localization = SYSTEM
		# 			scope = this
		# 		}
		# 	}
		# }
	}

	after = {
		owner = {
			clear_variable = number_of_sectors
			every_owned_fleet = {
				limit = { has_fleet_flag = access_checker_ship }
				delete_fleet = this
			}
			every_owned_sector = { remove_sector_flag = access_checked_sector }
		}
		

		if = {
			limit = { NOT = { has_star_flag = can_be_accessed } }
			starbase.fleet = { destroy_fleet = this }
			create_message = {
				type = NME_exclave_lost_message
				localization = NME_exclave_lost_message_desc
				days = 30
				target = this # the exclaved system
				variable = {
					type = name
					localization = SYSTEM
					scope = this
				}
			}
		}
		else = { remove_star_flag = can_be_accessed }	
	}
}

#This = ship (starbase)
#From = owner country
ship_event = {
    id = nme.3000
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = { is_country_type_with_subjects = yes } # Causes errors causes says is planet scope??
		solar_system = { NOT = { has_star_flag = nme_recently_built } }
	}
	
	immediate = {
		solar_system = { set_timed_star_flag = { flag = nme_recently_built years = 7 } }
	}
}
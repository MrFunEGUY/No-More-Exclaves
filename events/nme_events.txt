namespace = nme

country_event = {
    id = nme.1000
	is_triggered_only = yes	
	hide_window = yes

	trigger = {
		is_country_type_with_subjects = yes
	}
	
	immediate = {
		# So this doesnt run for all countries at the same time, for performance
		country_event = { id = nme.1010 days = 2 random = 358 }
	}
}

country_event = {
    id = nme.1010
	is_triggered_only = yes	
	hide_window = yes

	trigger = {
		is_country_type_with_subjects = yes
		any_system_within_border = {
			is_capital_system = no
			NOT = { exists = sector }
			NOT = { has_star_flag = nme_recently_built }
			NOT = { any_system_planet = { is_owned_by = root } }
			OR = { # EHOF Compat
				NOT = { has_global_flag = gigastructures_enabled }
				has_any_ehof = no
			}
		}
	}
	
	immediate = {

		capital_scope.solar_system = {
			create_fleet = {
				effect = {
					set_owner = root
					create_ship = {
						name = "Lonely System Check Ship"
						design = "NAME_AI_Constructor"
						graphical_culture = owner
					}
					set_location = {
						target = root.capital_scope
						distance = 10
						angle = random
					}
					save_event_target_as = access_checker_fleet
				}
			}
		}

		every_system_within_border = {
			limit = {
				is_capital_system = no
				NOT = { exists = sector }
				NOT = { has_star_flag = nme_recently_built }
				NOT = { any_system_planet = { is_owned_by = root } }
				OR = { # EHOF Compat
					NOT = { has_global_flag = gigastructures_enabled }
					has_any_ehof = no
				}
				event_target:access_checker_fleet = { NOT = { can_access_system = prev } }
			}
			system_event = { id = nme.2000 days = 1 random = 1800 }
		}
	}

	after = {		
		event_target:access_checker_fleet = { destroy_fleet = this }
	}	
}

system_event = {
    id = nme.2000
	is_triggered_only = yes
	hide_window = yes

	trigger = { 
		exists = owner
		owner = { is_at_war = no }
		is_capital_system = no
		NOT = { exists = sector }
		NOT = { has_star_flag = nme_recently_built }
		NOT = { any_system_planet = { is_owned_by = root } }
		OR = { # EHOF Compat
			NOT = { has_global_flag = gigastructures_enabled }
			has_any_ehof = no
		}
	}
	
	immediate = {

		owner = { save_event_target_as = exclave_owner }

		owner.capital_scope.solar_system = {
			create_fleet = {
				effect = {
					set_owner = event_target:exclave_owner
					create_ship = {
						name = "Lonely System Check Ship"
						design = "NAME_AI_Constructor"
						graphical_culture = owner
					}
					set_location = {
						target = event_target:exclave_owner.capital_scope
						distance = 10
						angle = random
					}
					save_event_target_as = access_checker_fleet
				}
			}
		}

		if = {
			limit = { event_target:access_checker_fleet = { NOT = { can_access_system = root } } }
			starbase.fleet = { destroy_fleet = this }
			create_message = {
				type = NME_exclave_lost_message
				localization = NME_exclave_lost_message_desc
				days = 30
				target = this # the exclaved system
				variable = {
					type = name
					localization = SYSTEM
					scope = this
				}
			}
		}
	}

	after = {
		event_target:access_checker_fleet = { destroy_fleet = this }
	}
}

#This = ship (starbase)
#From = owner country
ship_event = {
    id = nme.3000
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		# from = { is_country_type_with_subjects = yes } # Causes errors causes says is planet scope??
		solar_system = { NOT = { has_star_flag = nme_recently_built } }
	}
	
	immediate = {
		solar_system = { set_timed_star_flag = { flag = nme_recently_built years = 7 } }
	}
}